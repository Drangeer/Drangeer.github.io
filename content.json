{"meta":{"title":"LizZ的博客","subtitle":"LizZ Blog","description":"你好，欢迎光临我的博客","author":"LizZ","url":"https://drangeer.github.io","root":"/"},"pages":[{"title":"分类","date":"2020-04-07T06:49:17.718Z","updated":"2020-04-07T06:46:52.420Z","comments":false,"path":"categories/index.html","permalink":"https://drangeer.github.io/categories/index.html","excerpt":"","text":""},{"title":"友情链接","date":"2020-04-07T06:49:17.725Z","updated":"2020-04-07T06:46:52.422Z","comments":true,"path":"links/index.html","permalink":"https://drangeer.github.io/links/index.html","excerpt":"","text":""},{"title":"标签","date":"2020-04-07T06:49:17.740Z","updated":"2020-04-07T06:46:52.424Z","comments":false,"path":"tags/index.html","permalink":"https://drangeer.github.io/tags/index.html","excerpt":"","text":""}],"posts":[{"title":"cesium生成并加载3dTiles","slug":"cesium-3dtiles-osgb","date":"2020-04-02T07:41:18.000Z","updated":"2020-04-07T07:47:36.568Z","comments":true,"path":"2020/04/02/cesium-3dtiles-osgb/","link":"","permalink":"https://drangeer.github.io/2020/04/02/cesium-3dtiles-osgb/","excerpt":"","text":"cesium加载三维倾斜模型前言目前cesium加载海量模型，并不能直接通过gltf文件来使用，一种较为合适的通用做法是对大场景进行切片，即生成影像金字塔(LOD)。这样就跟wmts或tms方式一样来加载超大的影像。 osgb生成3dtiles1.osgb文件什么样主要长下面的样子，由一个元数据xml和一个Data文件夹组成，Data里面包含的是由一系列不同编号的osgb文件夹组成 2.如何生成3dtiles目前市面上的解决方案主要有cesiumlab/osg2cesiumApp。鉴于cesiumlab目前好像开始需要注册和收费，本着白嫖的精神使用另外一种文件进行转换就可以了。高阶大佬可以直接转步github,3dtiles是个好工具，以前研究过，但因为技术太渣，并没有全程跑下来运行成功。3.osg2cesiumApp使用直接按照说明使用即可，里面可能需要填写的参数我也没有闹明白，等以后再看吧 cesium加载3dtiles1.读取3dtiles文件 我使用的是nginx进行代理，这样生成的文件就不必非得存放到指定的位置，只要进行地址映射就好了2.cesium直接加载 目前模型生成之后，加载到地图上找不到在哪里，智能通过移动模型中心点位置和高度才可以显示。 等待解决","categories":[{"name":"cesium","slug":"cesium","permalink":"https://drangeer.github.io/categories/cesium/"},{"name":"gis","slug":"cesium/gis","permalink":"https://drangeer.github.io/categories/cesium/gis/"}],"tags":[{"name":"3dtiles","slug":"3dtiles","permalink":"https://drangeer.github.io/tags/3dtiles/"}]},{"title":"cesium-entity详解","slug":"cesium-entity","date":"2020-04-01T09:09:17.000Z","updated":"2020-04-07T07:52:28.471Z","comments":true,"path":"2020/04/01/cesium-entity/","link":"","permalink":"https://drangeer.github.io/2020/04/01/cesium-entity/","excerpt":"","text":"这里主要记录在使用cesium的entity时候，遇到的一些问题 点击不同类型的entity，展示对应信息框 目前主要是在entity生成的时候，给他绑定好指定的组件，然后再获取的时候，拿到对应的组件信息，往自定义的customInfoWindow上挂载","categories":[{"name":"cesium","slug":"cesium","permalink":"https://drangeer.github.io/categories/cesium/"},{"name":"gis","slug":"cesium/gis","permalink":"https://drangeer.github.io/categories/cesium/gis/"}],"tags":[{"name":"question list","slug":"question-list","permalink":"https://drangeer.github.io/tags/question-list/"}]},{"title":"hexo使用记录","slug":"03_hexo基本使用命令","date":"2020-04-01T03:31:21.000Z","updated":"2020-04-07T07:51:05.843Z","comments":true,"path":"2020/04/01/03_hexo基本使用命令/","link":"","permalink":"https://drangeer.github.io/2020/04/01/03_hexo%E5%9F%BA%E6%9C%AC%E4%BD%BF%E7%94%A8%E5%91%BD%E4%BB%A4/","excerpt":"","text":"1. 基本命令 启动本地预览服务 hexo s 重新生成项目 hexo g 清空缓存 hexo clean 发布到云端 hexo d s s s s 部署到gitee之后，需要手动刷新pages 2.发布文章1. 文章位置 `your project location\\source\\_posts` 2.添加图片 `{% asset_img picPath.png image describe %}`","categories":[{"name":"hexo","slug":"hexo","permalink":"https://drangeer.github.io/categories/hexo/"}],"tags":[{"name":"hexo","slug":"hexo","permalink":"https://drangeer.github.io/tags/hexo/"}]},{"title":"require.context自动加载模块","slug":"require-context","date":"2020-04-01T03:06:02.000Z","updated":"2020-04-07T07:53:07.391Z","comments":true,"path":"2020/04/01/require-context/","link":"","permalink":"https://drangeer.github.io/2020/04/01/require-context/","excerpt":"","text":"最近看到项目里面使用require.context来自动加载所有的模块，减少手动复制粘贴，提示效率和代码逼格。整好时间允许，我也来看看到底是如何实现的。 require.context是什么 一个webpack的api,通过执行require.context函数获取一个特定的上下文,主要用来实现自动化导入模块 在前端工程中,如果遇到从一个文件夹引入很多模块的情况,可以使用这个api,它会遍历文件夹中的指定文件,然后自动导入,使得不需要每次显式的调用import导入模块 比如在下面的情况中 详解 require.context的使用方法如下，该函数执行后返回的是一个函数,并且这个函数有3个属性 resolve 接受一个参数request,request为模块的匹配结果的的相对路径,返回这个匹配文件相对于整个工程的相对路径（） keys 返回匹配成功模块的名字组成的数组 id 执行环境的id(目前发现没有什么实际意义) require.context('directory','bool','reg') //directory {String} -读取文件的路径 //useSubdirectories {Boolean} -是否遍历文件的子目录 //regExp {RegExp} -匹配文件的正则 // 下面为demo const modules= require.context('./',true,/.vue$/); const relativePath= modules.keys() //获取所有.vue 模块的相对于./的路径 const module=modules(relativePath[0]).default // 获取第一个模块 使用范围1、自动模块导入2、所有图片的导入 QA目前在模块导出的时候，使用一个空对象{}接收对象名和对象值，再export default {XXX:XXX}这样就在使用的时候，必须使用modules.XXX才可以，不能使用{XXX} 来直接使用等待以后慢慢寻找更优解吧","categories":[],"tags":[{"name":"webpack","slug":"webpack","permalink":"https://drangeer.github.io/tags/webpack/"},{"name":"web","slug":"web","permalink":"https://drangeer.github.io/tags/web/"}]},{"title":"Hexo主题pure使用指南","slug":"webpackQuestion","date":"2020-03-13T06:34:15.000Z","updated":"2020-04-07T07:57:39.683Z","comments":true,"path":"2020/03/13/webpackQuestion/","link":"","permalink":"https://drangeer.github.io/2020/03/13/webpackQuestion/","excerpt":"","text":"1.webpack 打包问题Q:问题​ 当使用&lt;%= BASE_URL %&gt;进行项目打包的时候会抛出如下的bug 1234&lt;link rel=\"icon\" href=\"&lt;%= BASE_URL %&gt;favicon.ico\"&gt;&lt;!-- 使用base_url的时候，在项目打包过程中会抛出如下错误， 换成./就没有了，超级奇怪--&gt; 1// active ...s\\normalize-wheel\\src\\normalizeWheel.jsURIError: Failed to decode param '/%3C%=%20BASE_URL%20%%3Efavicon.ico' A:解决方法​ 目前没有查询到问题出现的具体原因。在git上看到有相关的介绍，有说是因为项目级的webpack的版本和内部子模块使用的版本冲突导致； ​ 现在规避了这个问题，使用相对路径./解决。 ​ 可能以后会遇到同样的问题，到时候再对这个bug进行完善补充吧。","categories":[{"name":"hexo","slug":"hexo","permalink":"https://drangeer.github.io/categories/hexo/"}],"tags":[{"name":"hexo","slug":"hexo","permalink":"https://drangeer.github.io/tags/hexo/"}]},{"title":"Hello World !","slug":"01_hello-world","date":"2020-03-12T07:31:21.000Z","updated":"2020-04-07T07:47:51.804Z","comments":true,"path":"2020/03/12/01_hello-world/","link":"","permalink":"https://drangeer.github.io/2020/03/12/01_hello-world/","excerpt":"","text":"hello blog ！欢迎我走进自建博客时代，这里会记录一些我的工作和生活点滴事件… 希望有幸浏览到这个blog的人，共享在此的片刻美好时光 ，若能对您有些许帮助的话，更会感到不胜荣幸！ ​ ​ 记录于：2020年3月12日15:31:21","categories":[],"tags":[{"name":"随笔","slug":"随笔","permalink":"https://drangeer.github.io/tags/%E9%9A%8F%E7%AC%94/"}]}],"categories":[{"name":"cesium","slug":"cesium","permalink":"https://drangeer.github.io/categories/cesium/"},{"name":"gis","slug":"cesium/gis","permalink":"https://drangeer.github.io/categories/cesium/gis/"},{"name":"hexo","slug":"hexo","permalink":"https://drangeer.github.io/categories/hexo/"}],"tags":[{"name":"3dtiles","slug":"3dtiles","permalink":"https://drangeer.github.io/tags/3dtiles/"},{"name":"question list","slug":"question-list","permalink":"https://drangeer.github.io/tags/question-list/"},{"name":"hexo","slug":"hexo","permalink":"https://drangeer.github.io/tags/hexo/"},{"name":"webpack","slug":"webpack","permalink":"https://drangeer.github.io/tags/webpack/"},{"name":"web","slug":"web","permalink":"https://drangeer.github.io/tags/web/"},{"name":"随笔","slug":"随笔","permalink":"https://drangeer.github.io/tags/%E9%9A%8F%E7%AC%94/"}]}