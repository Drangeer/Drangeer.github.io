{"meta":{"title":"LizZ的博客","subtitle":"LizZ Blog","description":"你好，欢迎光临我的博客","author":"LizZ","url":"https://drangeer.github.io","root":"/"},"pages":[{"title":"分类","date":"2020-04-07T06:49:17.718Z","updated":"2020-04-07T06:46:52.420Z","comments":false,"path":"categories/index.html","permalink":"https://drangeer.github.io/categories/index.html","excerpt":"","text":""},{"title":"友情链接","date":"2020-04-07T06:49:17.725Z","updated":"2020-04-07T06:46:52.422Z","comments":true,"path":"links/index.html","permalink":"https://drangeer.github.io/links/index.html","excerpt":"","text":""},{"title":"标签","date":"2020-04-07T06:49:17.740Z","updated":"2020-04-07T06:46:52.424Z","comments":false,"path":"tags/index.html","permalink":"https://drangeer.github.io/tags/index.html","excerpt":"","text":""}],"posts":[{"title":"cesium从入门到弃坑-3","slug":"cesium从入门到弃坑-3","date":"2020-04-14T08:12:05.000Z","updated":"2020-04-14T08:33:27.851Z","comments":true,"path":"2020/04/14/cesium从入门到弃坑-3/","link":"","permalink":"https://drangeer.github.io/2020/04/14/cesium%E4%BB%8E%E5%85%A5%E9%97%A8%E5%88%B0%E5%BC%83%E5%9D%91-3/","excerpt":"","text":"cesium添加demcesium添加dem的过程一番风顺，并没有遇到什么奇奇怪怪的问题。 其中提到的gdal2srtmtiles_x64软件，是使用python进行编写的。按照说明文档逐步进行操作即可。当发现Python编译出现错误SyntaxError: Non-ASCII character &#39;\\xe7&#39;这个错误的时候，是因为python2.7的默认编码文件是用ASCII码，而文件中包含了中文注释或者输出路径。需要在文件开头加入一行代码将文件存成UTF-8格式即可 1#coding&#x3D;utf-8 下面附图为dem添加成功的显示效果 参考https://www.jianshu.com/p/62d6f03f44e3","categories":[{"name":"cesium从入门到弃坑","slug":"cesium从入门到弃坑","permalink":"https://drangeer.github.io/categories/cesium%E4%BB%8E%E5%85%A5%E9%97%A8%E5%88%B0%E5%BC%83%E5%9D%91/"}],"tags":[{"name":"cesium","slug":"cesium","permalink":"https://drangeer.github.io/tags/cesium/"}]},{"title":"cesium从入门到弃坑-2","slug":"cesium从入门到弃坑-2","date":"2020-04-13T09:41:26.000Z","updated":"2020-04-14T01:36:24.373Z","comments":true,"path":"2020/04/13/cesium从入门到弃坑-2/","link":"","permalink":"https://drangeer.github.io/2020/04/13/cesium%E4%BB%8E%E5%85%A5%E9%97%A8%E5%88%B0%E5%BC%83%E5%9D%91-2/","excerpt":"","text":"1.cesium加载3dtiles正常情况下，cesium加载3dtiles的时候，网上一般的写法是使用指定的函数+url就可以实现3dtiles的加载了，但第一次加载的时候，却会报如下所示的错误。 错误说明为：RuntimeError: Unsupported glTF Extension: KHR_technique_webgl 2.解决方法从网上查询到的原因是cesium已经不支持KHR_technique_webgl扩展新版，需要升级一下gltf数据、或者修改源码使其支持即可。 现将实现代码粘贴如下 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263var fixGltf = function(gltf) &#123; if (!gltf.extensionsUsed) &#123; return; &#125; var v = gltf.extensionsUsed.indexOf('KHR_technique_webgl'); var t = gltf.extensionsRequired.indexOf('KHR_technique_webgl'); // 中招了。。 if (v !== -1) &#123; gltf.extensionsRequired.splice(t, 1, 'KHR_techniques_webgl'); gltf.extensionsUsed.splice(v, 1, 'KHR_techniques_webgl'); gltf.extensions = gltf.extensions || &#123;&#125;; gltf.extensions['KHR_techniques_webgl'] = &#123;&#125;; gltf.extensions['KHR_techniques_webgl'].programs = gltf.programs; gltf.extensions['KHR_techniques_webgl'].shaders = gltf.shaders; gltf.extensions['KHR_techniques_webgl'].techniques = gltf.techniques; var techniques = gltf.extensions['KHR_techniques_webgl'].techniques; gltf.materials.forEach(function (mat, index) &#123; gltf.materials[index].extensions['KHR_technique_webgl'].values = gltf.materials[index].values; gltf.materials[index].extensions['KHR_techniques_webgl'] = gltf.materials[index].extensions['KHR_technique_webgl']; var vtxfMaterialExtension = gltf.materials[index].extensions['KHR_techniques_webgl']; for (var value in vtxfMaterialExtension.values) &#123; var us = techniques[vtxfMaterialExtension.technique].uniforms; for (var key in us) &#123; if (us[key] === value) &#123; vtxfMaterialExtension.values[key] = vtxfMaterialExtension.values[value]; delete vtxfMaterialExtension.values[value]; break; &#125; &#125; &#125;; &#125;); techniques.forEach(function (t) &#123; for (var attribute in t.attributes) &#123; var name = t.attributes[attribute]; t.attributes[attribute] = t.parameters[name]; &#125;; for (var uniform in t.uniforms) &#123; var name = t.uniforms[uniform]; t.uniforms[uniform] = t.parameters[name]; &#125;; &#125;); &#125;&#125;Object.defineProperties(Cesium.Model.prototype, &#123; _cachedGltf: &#123; set: function (value) &#123; this._vtxf_cachedGltf = value; if (this._vtxf_cachedGltf &amp;&amp; this._vtxf_cachedGltf._gltf) &#123; fixGltf(this._vtxf_cachedGltf._gltf); &#125; &#125;, get: function () &#123; return this._vtxf_cachedGltf; &#125; &#125;&#125;); 参考资料https://www.jianshu.com/p/e0e0a62c5726https://blog.csdn.net/qq_36377037/article/details/86591761","categories":[{"name":"cesium从入门到弃坑","slug":"cesium从入门到弃坑","permalink":"https://drangeer.github.io/categories/cesium%E4%BB%8E%E5%85%A5%E9%97%A8%E5%88%B0%E5%BC%83%E5%9D%91/"}],"tags":[{"name":"cesium","slug":"cesium","permalink":"https://drangeer.github.io/tags/cesium/"}]},{"title":"cesium从入门到弃坑-1","slug":"cesium从入门到弃坑-1","date":"2020-04-13T08:43:46.000Z","updated":"2020-04-13T09:35:48.662Z","comments":true,"path":"2020/04/13/cesium从入门到弃坑-1/","link":"","permalink":"https://drangeer.github.io/2020/04/13/cesium%E4%BB%8E%E5%85%A5%E9%97%A8%E5%88%B0%E5%BC%83%E5%9D%91-1/","excerpt":"","text":"最近因为项目需要，又开了一个填坑，来记录自己学习和使用cesium中遇到的问题或者总结的经验。 1.在vue中加载cesium主要的引入方式有两种 在index.html中直接加载js和css 通过webpack加载 下面详细记录两种加载方式 1.直接引用cesium 1.安装 npm i cesium 2.拷贝node_modules/cesium/build下的文件到public中 3.在index.html中引用 然后就可以在项目中愉快的使用了 2.通过webpack加载cesium 安装包 yarn add cesium 配置vue.config.js 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859const CopyWebpackPlugin = require('copy-webpack-plugin')const webpack = require('webpack')const path = require('path')// 添加cesium文件路径const cesiumSource = './node_modules/cesium/Source'const cesiumWorkers = '../Build/Cesium/Workers'module.exports = &#123; publicPath: './', outputDir: 'dist', assetsDir: 'assets', productionSourceMap: false, filenameHashing: false, lintOnSave: true, devServer: &#123; open: false, host: '0.0.0.0', port: 8066, https: false, hotOnly: false, proxy: &#123; '/3dtiles': &#123; target: `http://localhost`, changeOrigin: true &#125; &#125; &#125;, configureWebpack: &#123; output: &#123; sourcePrefix: ' ' &#125;, amd: &#123; toUrlUndefined: true &#125;, resolve: &#123; alias: &#123; vue$: 'vue/dist/vue.esm.js', '@': path.resolve('src'), cesium: path.resolve(__dirname, cesiumSource) &#125; &#125;, plugins: [ new CopyWebpackPlugin([&#123; from: path.join(cesiumSource, cesiumWorkers), to: 'Workers' &#125;]), new CopyWebpackPlugin([&#123; from: path.join(cesiumSource, 'Assets'), to: 'Assets' &#125;]), new CopyWebpackPlugin([&#123; from: path.join(cesiumSource, 'Widgets'), to: 'Widgets' &#125;]), new CopyWebpackPlugin([&#123; from: path.join(cesiumSource, 'ThirdParty/Workers'), to: 'ThirdParty/Workers' &#125;]), new webpack.DefinePlugin(&#123; CESIUM_BASE_URL: JSON.stringify('./') &#125;) ], module: &#123; unknownContextCritical: /^.\\/.*$/, unknownContextCritical: false &#125; &#125;&#125; 项目引用12345// /*网上有部分代码是使用下面的情况直接引用，但是我这里加载的时候，提示cesium is undefined*/// import Cesium from 'cesium/Cesium'import * as Cesium from 'cesium/Cesium'import 'cesium/Widgets/widgets.css'// 接下来就按照正常的方式加载即可 最后附一张图表明项目添加成功","categories":[{"name":"cesium从入门到弃坑","slug":"cesium从入门到弃坑","permalink":"https://drangeer.github.io/categories/cesium%E4%BB%8E%E5%85%A5%E9%97%A8%E5%88%B0%E5%BC%83%E5%9D%91/"}],"tags":[{"name":"cesium","slug":"cesium","permalink":"https://drangeer.github.io/tags/cesium/"}]},{"title":"IDEA提示页面未授权的解决方案","slug":"IDEA提示页面未授权","date":"2020-04-09T03:11:11.000Z","updated":"2020-04-09T03:21:17.282Z","comments":true,"path":"2020/04/09/IDEA提示页面未授权/","link":"","permalink":"https://drangeer.github.io/2020/04/09/IDEA%E6%8F%90%E7%A4%BA%E9%A1%B5%E9%9D%A2%E6%9C%AA%E6%8E%88%E6%9D%83/","excerpt":"","text":"Q: requested without authorization,you can copy URL and open it in browser to trust it详情如下图所示： 解决方案这个问题发生在直接通过idea的快捷方式打开网页时候，会构建一个端口号为63342的默认服务，通过这种方式可以方便调用接口和其他一些静态资源。 可以通过如下方式开启授权即可。 这样设置只在当前项目中生效，在不同的项目中重复设置即可。以前遇到类似的问题，总是需要现场查询，记录下来之后，就方便以后快速查找了。","categories":[],"tags":[{"name":"idea","slug":"idea","permalink":"https://drangeer.github.io/tags/idea/"}]},{"title":"rtmp视频直播终极解决方案","slug":"视频直播","date":"2020-04-09T03:05:59.000Z","updated":"2020-04-09T03:09:45.443Z","comments":true,"path":"2020/04/09/视频直播/","link":"","permalink":"https://drangeer.github.io/2020/04/09/%E8%A7%86%E9%A2%91%E7%9B%B4%E6%92%AD/","excerpt":"","text":"","categories":[],"tags":[{"name":"rtmp","slug":"rtmp","permalink":"https://drangeer.github.io/tags/rtmp/"}]},{"title":"cesium生成并加载3dTiles","slug":"cesium-3dtiles-osgb","date":"2020-04-02T07:41:18.000Z","updated":"2020-04-14T07:01:42.816Z","comments":true,"path":"2020/04/02/cesium-3dtiles-osgb/","link":"","permalink":"https://drangeer.github.io/2020/04/02/cesium-3dtiles-osgb/","excerpt":"","text":"cesium加载三维倾斜模型前言目前cesium加载海量模型，并不能直接通过gltf文件来使用，一种较为合适的通用做法是对大场景进行切片，即生成影像金字塔(LOD)。这样就跟wmts或tms方式一样来加载超大的影像。 osgb生成3dtiles1.osgb文件什么样主要长下面的样子，由一个元数据xml和一个Data文件夹组成，Data里面包含的是由一系列不同编号的osgb文件夹组成 2.如何生成3dtiles目前市面上的解决方案主要有cesiumlab/osg2cesiumApp。鉴于cesiumlab目前好像开始需要注册和收费，本着白嫖的精神使用另外一种文件进行转换就可以了。高阶大佬可以直接转步github,3dtiles是个好工具，以前研究过，但因为技术太渣和时间限制，没有对其进行详细的研究。 osg2cesiumApp直接按照说明使用即可，下图中的数据是一个错误的参数，srs坐标系和原点都不对，应该是从xml文件里面获取的，但我拿到的测试数据坐标系没有转换，所以才导致后来发生了好多坑。 cesiumlab因为已经有一份以前转换好的数据，关于这方面的叙述就先不展开了。cesiumlab或者其他的地方已经有很详细的资料了，直接拿来参考即可。 osg2cesiumApp与cesiumlab比较两者都可以直接生成3dtiles，但生成的效果略有不同。 osg2cesiumApp生成的效果 cesiumlab生成效果 如图所示，能够很明显的看出来问题。 app生成的模型在地图缩放的时候，需要等待片刻才能显示所有的模型，lab生成的模型却不存在这个问题。 app模型看起来精细程度较高。 深入分析原因，可能是lab采用了分级tileset.json，所以在不同层级能够获得较好的加载效果，但同时也损失了部分精细程度。 cesium加载3dtiles1.读取3dtiles文件 我使用的是nginx进行代理，这样生成的文件就不必非得存放到指定的位置，只要进行地址映射就好了2.cesium直接加载 目前模型生成之后，加载到地图上找不到在哪里，只能通过移动模型中心点位置和高度才可以显示。 (2020年4月14日11:36:37更新) 现在使用原生的cesium可以正常加载，也没有任何显示问题，上次是因为使用了超图的cesium框架，具体细节未知，更加坚定了使用原生框架来解决问题。 模型高度不准确 需要在模型加载之后，通过设置模型的高度来调整即可 var tileset = new Cesium.Cesium3DTileset({ url: '/3dtiles/wkm4326/WKM/tileset.json' }) viewer.scene.primitives.add(tileset) // 修改高度 const h = -10 tileset.readyPromise.then((arg) =&gt; { var cartographic = Cesium.Cartographic.fromCartesian(arg.boundingSphere.center) var surface = Cesium.Cartesian3.fromRadians(cartographic.longitude, cartographic.latitude, cartographic.height) var offset = Cesium.Cartesian3.fromRadians(cartographic.longitude, cartographic.latitude, cartographic.height + h) var translation = Cesium.Cartesian3.subtract(offset, surface, new Cesium.Cartesian3()) tileset.modelMatrix = Cesium.Matrix4.fromTranslation(translation) viewer.zoomTo(tileset) }) 参考链接 https://www.cnblogs.com/HandyLi/p/11113030.html","categories":[{"name":"cesium从入门到弃坑","slug":"cesium从入门到弃坑","permalink":"https://drangeer.github.io/categories/cesium%E4%BB%8E%E5%85%A5%E9%97%A8%E5%88%B0%E5%BC%83%E5%9D%91/"}],"tags":[{"name":"cesium","slug":"cesium","permalink":"https://drangeer.github.io/tags/cesium/"}]},{"title":"cesium-entity详解","slug":"cesium-entity","date":"2020-04-01T09:09:17.000Z","updated":"2020-04-14T07:05:23.574Z","comments":true,"path":"2020/04/01/cesium-entity/","link":"","permalink":"https://drangeer.github.io/2020/04/01/cesium-entity/","excerpt":"","text":"这里主要记录在使用cesium的entity时候，遇到的一些问题 点击不同类型的entity，展示对应信息框 目前主要是在entity生成的时候，给他绑定好指定的组件，然后再获取的时候，拿到对应的组件信息，往自定义的customInfoWindow上挂载","categories":[{"name":"cesium","slug":"cesium","permalink":"https://drangeer.github.io/categories/cesium/"}],"tags":[{"name":"question list","slug":"question-list","permalink":"https://drangeer.github.io/tags/question-list/"}]},{"title":"hexo使用记录","slug":"03_hexo基本使用命令","date":"2020-04-01T03:31:21.000Z","updated":"2020-04-07T07:51:05.843Z","comments":true,"path":"2020/04/01/03_hexo基本使用命令/","link":"","permalink":"https://drangeer.github.io/2020/04/01/03_hexo%E5%9F%BA%E6%9C%AC%E4%BD%BF%E7%94%A8%E5%91%BD%E4%BB%A4/","excerpt":"","text":"1. 基本命令 启动本地预览服务 hexo s 重新生成项目 hexo g 清空缓存 hexo clean 发布到云端 hexo d s s s s 部署到gitee之后，需要手动刷新pages 2.发布文章1. 文章位置 `your project location\\source\\_posts` 2.添加图片 `{% asset_img picPath.png image describe %}`","categories":[{"name":"hexo","slug":"hexo","permalink":"https://drangeer.github.io/categories/hexo/"}],"tags":[{"name":"hexo","slug":"hexo","permalink":"https://drangeer.github.io/tags/hexo/"}]},{"title":"require.context自动加载模块","slug":"require-context","date":"2020-04-01T03:06:02.000Z","updated":"2020-04-07T07:53:07.391Z","comments":true,"path":"2020/04/01/require-context/","link":"","permalink":"https://drangeer.github.io/2020/04/01/require-context/","excerpt":"","text":"最近看到项目里面使用require.context来自动加载所有的模块，减少手动复制粘贴，提示效率和代码逼格。整好时间允许，我也来看看到底是如何实现的。 require.context是什么 一个webpack的api,通过执行require.context函数获取一个特定的上下文,主要用来实现自动化导入模块 在前端工程中,如果遇到从一个文件夹引入很多模块的情况,可以使用这个api,它会遍历文件夹中的指定文件,然后自动导入,使得不需要每次显式的调用import导入模块 比如在下面的情况中 详解 require.context的使用方法如下，该函数执行后返回的是一个函数,并且这个函数有3个属性 resolve 接受一个参数request,request为模块的匹配结果的的相对路径,返回这个匹配文件相对于整个工程的相对路径（） keys 返回匹配成功模块的名字组成的数组 id 执行环境的id(目前发现没有什么实际意义) require.context('directory','bool','reg') //directory {String} -读取文件的路径 //useSubdirectories {Boolean} -是否遍历文件的子目录 //regExp {RegExp} -匹配文件的正则 // 下面为demo const modules= require.context('./',true,/.vue$/); const relativePath= modules.keys() //获取所有.vue 模块的相对于./的路径 const module=modules(relativePath[0]).default // 获取第一个模块 使用范围1、自动模块导入2、所有图片的导入 QA目前在模块导出的时候，使用一个空对象{}接收对象名和对象值，再export default {XXX:XXX}这样就在使用的时候，必须使用modules.XXX才可以，不能使用{XXX} 来直接使用等待以后慢慢寻找更优解吧","categories":[],"tags":[{"name":"webpack","slug":"webpack","permalink":"https://drangeer.github.io/tags/webpack/"},{"name":"web","slug":"web","permalink":"https://drangeer.github.io/tags/web/"}]},{"title":"Hexo主题pure使用指南","slug":"webpackQuestion","date":"2020-03-13T06:34:15.000Z","updated":"2020-04-07T07:57:39.683Z","comments":true,"path":"2020/03/13/webpackQuestion/","link":"","permalink":"https://drangeer.github.io/2020/03/13/webpackQuestion/","excerpt":"","text":"1.webpack 打包问题Q:问题​ 当使用&lt;%= BASE_URL %&gt;进行项目打包的时候会抛出如下的bug 1234&lt;link rel=\"icon\" href=\"&lt;%= BASE_URL %&gt;favicon.ico\"&gt;&lt;!-- 使用base_url的时候，在项目打包过程中会抛出如下错误， 换成./就没有了，超级奇怪--&gt; 1// active ...s\\normalize-wheel\\src\\normalizeWheel.jsURIError: Failed to decode param '/%3C%=%20BASE_URL%20%%3Efavicon.ico' A:解决方法​ 目前没有查询到问题出现的具体原因。在git上看到有相关的介绍，有说是因为项目级的webpack的版本和内部子模块使用的版本冲突导致； ​ 现在规避了这个问题，使用相对路径./解决。 ​ 可能以后会遇到同样的问题，到时候再对这个bug进行完善补充吧。","categories":[{"name":"hexo","slug":"hexo","permalink":"https://drangeer.github.io/categories/hexo/"}],"tags":[{"name":"hexo","slug":"hexo","permalink":"https://drangeer.github.io/tags/hexo/"}]},{"title":"Hello World !","slug":"01_hello-world","date":"2020-03-12T07:31:21.000Z","updated":"2020-04-07T07:47:51.804Z","comments":true,"path":"2020/03/12/01_hello-world/","link":"","permalink":"https://drangeer.github.io/2020/03/12/01_hello-world/","excerpt":"","text":"hello blog ！欢迎我走进自建博客时代，这里会记录一些我的工作和生活点滴事件… 希望有幸浏览到这个blog的人，共享在此的片刻美好时光 ，若能对您有些许帮助的话，更会感到不胜荣幸！ ​ ​ 记录于：2020年3月12日15:31:21","categories":[],"tags":[{"name":"随笔","slug":"随笔","permalink":"https://drangeer.github.io/tags/%E9%9A%8F%E7%AC%94/"}]}],"categories":[{"name":"cesium从入门到弃坑","slug":"cesium从入门到弃坑","permalink":"https://drangeer.github.io/categories/cesium%E4%BB%8E%E5%85%A5%E9%97%A8%E5%88%B0%E5%BC%83%E5%9D%91/"},{"name":"cesium","slug":"cesium","permalink":"https://drangeer.github.io/categories/cesium/"},{"name":"hexo","slug":"hexo","permalink":"https://drangeer.github.io/categories/hexo/"}],"tags":[{"name":"cesium","slug":"cesium","permalink":"https://drangeer.github.io/tags/cesium/"},{"name":"idea","slug":"idea","permalink":"https://drangeer.github.io/tags/idea/"},{"name":"rtmp","slug":"rtmp","permalink":"https://drangeer.github.io/tags/rtmp/"},{"name":"question list","slug":"question-list","permalink":"https://drangeer.github.io/tags/question-list/"},{"name":"hexo","slug":"hexo","permalink":"https://drangeer.github.io/tags/hexo/"},{"name":"webpack","slug":"webpack","permalink":"https://drangeer.github.io/tags/webpack/"},{"name":"web","slug":"web","permalink":"https://drangeer.github.io/tags/web/"},{"name":"随笔","slug":"随笔","permalink":"https://drangeer.github.io/tags/%E9%9A%8F%E7%AC%94/"}]}